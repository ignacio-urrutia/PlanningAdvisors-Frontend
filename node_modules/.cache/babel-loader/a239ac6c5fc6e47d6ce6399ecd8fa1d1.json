{"ast":null,"code":"var _jsxFileName = \"/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/pa-app/src/SingleStockData.js\";\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StockTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prevColumns = [];\n    this.state = {\n      columns: ['date'],\n      stock_name: ['BTC_USD'],\n      data: {}\n    };\n  }\n\n  getStockData() {\n    const active_columns = this.props.active_columns;\n    const stock_name = this.props.active_stock;\n    fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`).then(response => {\n      return response.json();\n    }).then(fetched_data => {\n      this.setState({\n        data: fetched_data\n      });\n    });\n  }\n\n  render() {\n    if (this.props.active_columns !== this.prevColumns || this.props.active_stock !== this.prevStock) {\n      this.getStockData();\n      this.prevColumns = this.props.active_columns;\n      this.prevStock = this.props.active_stock;\n    }\n\n    const isDataEmpty = Object.keys(this.state.data).length === 0;\n\n    if (!isDataEmpty) {\n      // return <BootstrapTable keyField='name' data = {this.state.data}/>\n      return /*#__PURE__*/_jsxDEV(JSONTable, {\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" No hay datos disponibles \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\n\nfunction JSONTable(props) {\n  // Usamos las keys como headers\n  let headers = Object.keys(props.data[0]);\n  let tableHeaders;\n\n  if (props.headers) {\n    tableHeaders = headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\" \", props.headers[header]]\n    }, header, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this));\n  } else {\n    tableHeaders = headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\" \", header]\n    }, header, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this));\n  }\n\n  const tableHead = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: tableHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 21\n  }, this); // Colocar llaves como input\n\n\n  var keys = Object.keys(props.data[0]);\n  const listRows = []; // Iteramos sobre cada objeto que será una fila\n\n  let i = 1;\n\n  for (var obj of props.data) {\n    try {\n      let listData = [];\n      let j = 1; // Iteramos sobre cada elemento que será una celda\n\n      for (const k of keys) {\n        let value;\n\n        if (props.columnManage && props.columnManage[k]) {\n          let f = props.columnManage[k];\n          value = f(obj[k]);\n        } else {\n          value = obj[k];\n        }\n\n        listData.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\" \", value, \" \"]\n        }, j, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 23\n        }, this));\n        j++;\n      } // console.log(listData);\n\n\n      var dataTR = /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: listData\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 20\n      }, this); // var element = <tbody key={obj.id} > {dataTR} </tbody> \n\n\n      listRows.push(dataTR);\n      i++;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  var tableBody = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: listRows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 19\n  }, this); // const listRows = data.data.map((item) => \n  //   <li key = {item.id}>{  item.id}</li>)\n\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    responsive: \"sm\",\n    children: [tableHead, tableBody]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 11\n  }, this);\n}\n\n_c = JSONTable;\nexport { StockTable };\n\nvar _c;\n\n$RefreshReg$(_c, \"JSONTable\");","map":{"version":3,"sources":["/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/pa-app/src/SingleStockData.js"],"names":["React","Table","StockTable","Component","constructor","props","prevColumns","state","columns","stock_name","data","getStockData","active_columns","active_stock","fetch","then","response","json","fetched_data","setState","render","prevStock","isDataEmpty","Object","keys","length","JSONTable","headers","tableHeaders","map","header","tableHead","listRows","i","obj","listData","j","k","value","columnManage","f","push","dataTR","e","console","error","tableBody"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Table from 'react-bootstrap/Table'\n\nclass StockTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prevColumns = [];\n\n    this.state = {\n      columns: ['date'],\n      stock_name: ['BTC_USD'],\n      data: {}\n    }\n  }\n\n  getStockData() {\n    const active_columns = this.props.active_columns;\n    const stock_name = this.props.active_stock;\n    fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`)\n    .then(response => {\n      return response.json();\n    })\n    .then(fetched_data => {\n      this.setState({\n        data: fetched_data\n      });\n    })\n  }\n\n  render(){\n   if (this.props.active_columns !== this.prevColumns || this.props.active_stock !== this.prevStock){\n     this.getStockData();\n     this.prevColumns = this.props.active_columns;\n     this.prevStock = this.props.active_stock;\n   }\n\n    const isDataEmpty = Object.keys(this.state.data).length === 0;\n    if (!isDataEmpty) { \n      // return <BootstrapTable keyField='name' data = {this.state.data}/>\n      return <JSONTable data={this.state.data}/>; \n    }\n    else{\n      return <div> No hay datos disponibles </div>\n    }\n  }\n}\n\nfunction JSONTable(props) {\n  // Usamos las keys como headers\n  let headers = Object.keys(props.data[0]);\n  let tableHeaders;\n\n  if (props.headers) {\n    tableHeaders = headers.map((header) =>\n    <th key={header}> {props.headers[header]}</th> );\n  }\n  else {\n    tableHeaders = headers.map((header) =>\n    <th key={header}> {header}</th>);\n  }\n  const tableHead = <thead><tr>{tableHeaders}</tr></thead>;\n\n  // Colocar llaves como input\n  var keys = Object.keys(props.data[0]);\n  const listRows = [];\n\n  // Iteramos sobre cada objeto que será una fila\n  let i = 1;\n  for (var obj of props.data){\n    try {\n      let listData = [];\n      let j = 1;\n      // Iteramos sobre cada elemento que será una celda\n      for (const k of keys){\n        let value;\n        if (props.columnManage && props.columnManage[k]){\n          let f = props.columnManage[k];\n          value = f(obj[k]);\n        }\n        else {\n          value = obj[k];\n        }\n        listData.push(<td key={j}> {value} </td>);\n        j ++;\n      }\n      // console.log(listData);\n      var dataTR = <tr key={i}>{listData}</tr>\n      // var element = <tbody key={obj.id} > {dataTR} </tbody> \n      listRows.push(dataTR);\n      i++;\n    } catch (e) {console.error(e)}\n    }\n\n  var tableBody = <tbody>{listRows}</tbody>\n  // const listRows = data.data.map((item) => \n  //   <li key = {item.id}>{  item.id}</li>)\n  return (<Table striped bordered hover responsive=\"sm\">{tableHead}{tableBody}</Table>)  \n}\n\nexport {StockTable};"]},"metadata":{},"sourceType":"module"}