{"ast":null,"code":"var _jsxFileName = \"/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/Git/PlanningAdvisors-Frontend/src/MultipleStockData.js\";\nimport React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { numericSortFunc } from './auxFunctions';\nimport { Checkbox } from './TableComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MultipleStockTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prevColumns = [];\n    this.prevStockList = [];\n    this.state = {\n      data: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getStocksData();\n  }\n\n  componentDidUpdate() {\n    if (this.props.stocks_list !== this.prevStockList) {\n      this.getStocksData();\n      this.prevColumns = this.props.active_columns;\n      this.prevStockList = this.props.stocks_list;\n    }\n  }\n\n  async getStocksData() {\n    let active_columns = this.props.active_columns;\n    active_columns = Object.keys(this.props.columnInfo).slice(1);\n    const stocks_list = this.props.stocks_list;\n    var stocksData = [];\n\n    if (active_columns.length === 0) {\n      for (let stock_name of stocks_list) {\n        var new_row = {};\n        new_row['name'] = stock_name;\n        stocksData.push(new_row);\n        this.setState({\n          data: stocksData\n        });\n      }\n\n      return;\n    }\n\n    for await (let stock_name of stocks_list) {\n      fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`).then(response => {\n        return response.json();\n      }).then(fetched_data => {\n        var new_row = {\n          'name': fetched_data['stock_name']\n        };\n        Object.assign(new_row, fetched_data['data'][0]);\n        stocksData.push(new_row);\n        this.setState({\n          data: stocksData\n        });\n      });\n    }\n  }\n\n  render() {\n    let active_columns = ['name'].concat(this.props.active_columns);\n    active_columns = active_columns = Object.keys(this.props.columnInfo);\n    const columns = active_columns.map(col => {\n      let columnData = {\n        dataField: col,\n        text: this.props.columnInfo[col]['text'],\n        sort: true,\n        type: this.props.columnInfo[col]['type']\n      };\n\n      if (this.props.columnInfo[col]['formatter']) {\n        columnData['formatter'] = this.props.columnInfo[col]['formatter'];\n      }\n\n      if (this.props.columnInfo[col]['sortFunc']) {\n        columnData['sortFunc'] = this.props.columnInfo[col]['sortFunc'];\n      }\n\n      if (this.props.columnInfo[col]['style']) {\n        columnData['style'] = this.props.columnInfo[col]['style'];\n      }\n\n      if (this.props.columnInfo[col]['hidden']) {\n        columnData['hidden'] = this.props.columnInfo[col]['hidden'];\n      }\n\n      return columnData;\n    });\n    const isDataEmpty = Object.keys(this.state.data).length === 0;\n\n    if (!isDataEmpty) {\n      return /*#__PURE__*/_jsxDEV(BootstrapTable, {\n        striped: true,\n        hover: true,\n        condensed: true,\n        keyField: \"name\",\n        data: this.state.data,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 12\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No hay datos disponibles\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nclass MultipleStockData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = ['date', 'open', 'close', 'high', 'low', 'volume', 'adjclose', 'daily_return', 'percentage_return', 'rsi_3d', 'rsi_5d', 'rsi_14d', 'rsi_25d'];\n    this.columnInfo = {\n      'name': {\n        'text': 'Accion',\n        'formatter': name => {\n          return name.toUpperCase();\n        },\n        'type': 'string',\n        'style': {\n          'fontWeight': 'bold'\n        }\n      },\n      'date': {\n        'text': 'Fecha',\n        'formatter': dateString => {\n          let date = new Date(dateString);\n          return date.toLocaleDateString();\n        },\n        'type': 'string',\n        'hidden': true\n      },\n      'open': {\n        'text': 'Abrir',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'close': {\n        'text': 'Cierre',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'high': {\n        'text': 'Max',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'low': {\n        'text': 'Min',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'volume': {\n        'text': 'Volumen',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'adjclose': {\n        'text': 'Cierre ajus.',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'daily_return': {\n        'text': 'Rentabilidad por dia',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'percentage_return': {\n        'text': 'Rentabilidad %',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'hidden': true\n      },\n      'rsi_3d': {\n        'text': 'RSI 3 días',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'style': this.styleRanges(30, 70),\n        'hidden': true\n      },\n      'rsi_5d': {\n        'text': 'RSI 5 días',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'style': this.styleRanges(30, 70),\n        'hidden': true\n      },\n      'rsi_14d': {\n        'text': 'RSI 14 días',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'style': this.styleRanges(30, 70),\n        'hidden': true\n      },\n      'rsi_25d': {\n        'text': 'RSI 25 días',\n        'formatter': n => {\n          return this.roundDecimals(n, 2);\n        },\n        'type': 'number',\n        'sortFunc': numericSortFunc,\n        'style': this.styleRanges(30, 70),\n        'hidden': true\n      }\n    }; // Creamos headers para checklist\n\n    this.headers = {};\n\n    for (let stock of Object.keys(this.columnInfo)) {\n      this.headers[stock] = this.columnInfo[stock]['text'];\n    }\n\n    this.state = {\n      stocks_list: [],\n      active_columns: [],\n      columnInfo: this.columnInfo\n    };\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n  }\n\n  styleRanges(a, b) {\n    return function callback(cell, row, rowIndex, colIndex) {\n      if (+cell > b) {\n        return {\n          color: 'red'\n        };\n      } else if (+cell < a) {\n        return {\n          color: 'green'\n        };\n      }\n    };\n  }\n\n  roundDecimals(n, decimals) {\n    return Math.round(n * 10 ** decimals) / 10 ** decimals;\n  }\n\n  getStocksList() {\n    fetch(`http://localhost:3001/stocksList`).then(response => {\n      return response.json();\n    }).then(fetched_data => {\n      this.setState({\n        stocks_list: fetched_data\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.getStocksList();\n  }\n\n  handleColumnChange(column_dict) {\n    let auxColumnInfo = this.state.columnInfo;\n\n    for (var col of this.columns) {\n      auxColumnInfo[col]['hidden'] = !column_dict[col];\n    }\n\n    this.setState({\n      columnInfo: auxColumnInfo\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panels\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-info\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          onColumnChange: this.handleColumnChange,\n          columns: this.columns,\n          optionLabels: this.headers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-positions\",\n        children: /*#__PURE__*/_jsxDEV(MultipleStockTable, {\n          stocks_list: this.state.stocks_list,\n          columnInfo: this.state.columnInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport { MultipleStockData };","map":{"version":3,"sources":["/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/Git/PlanningAdvisors-Frontend/src/MultipleStockData.js"],"names":["React","BootstrapTable","numericSortFunc","Checkbox","MultipleStockTable","Component","constructor","props","prevColumns","prevStockList","state","data","componentDidMount","getStocksData","componentDidUpdate","stocks_list","active_columns","Object","keys","columnInfo","slice","stocksData","length","stock_name","new_row","push","setState","fetch","then","response","json","fetched_data","assign","render","concat","columns","map","col","columnData","dataField","text","sort","type","isDataEmpty","MultipleStockData","name","toUpperCase","dateString","date","Date","toLocaleDateString","n","roundDecimals","styleRanges","headers","stock","handleColumnChange","bind","a","b","callback","cell","row","rowIndex","colIndex","color","decimals","Math","round","getStocksList","column_dict","auxColumnInfo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport {numericSortFunc} from './auxFunctions';\nimport {Checkbox} from './TableComponents'\n\nclass MultipleStockTable extends React.Component {\n    constructor(props) {\n      super(props);\n      this.prevColumns = [];\n      this.prevStockList = [];\n  \n      this.state = {\n        data: {}\n      }\n    }\n  \n  componentDidMount(){\n    this.getStocksData();\n  }\n  \n  componentDidUpdate(){\n    if (this.props.stocks_list !== this.prevStockList){\n      this.getStocksData();\n      this.prevColumns = this.props.active_columns;\n      this.prevStockList = this.props.stocks_list;\n    }\n  }\n  \n   async getStocksData() {\n      let active_columns = this.props.active_columns;\n      active_columns = Object.keys(this.props.columnInfo).slice(1)\n      const stocks_list = this.props.stocks_list;\n      var stocksData = [];\n  \n    if (active_columns.length === 0) {\n      for (let stock_name of stocks_list){\n        var new_row = {};\n        new_row['name'] = stock_name;\n  \n        stocksData.push(new_row)\n  \n        this.setState({data: stocksData});\n      }\n      return;\n    }\n  \n      for await (let stock_name of stocks_list){\n        fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`)\n        .then(response => {\n          return response.json();\n        })\n        .then(fetched_data => {\n          var new_row = {\n            'name': fetched_data['stock_name']\n          }\n          Object.assign(new_row, fetched_data['data'][0]);\n  \n          stocksData.push(new_row)\n  \n          this.setState({\n            data: stocksData\n          })\n        })\n      }\n  \n    }\n  \n    render(){\n      let active_columns = ['name'].concat(this.props.active_columns);\n      active_columns = active_columns = Object.keys(this.props.columnInfo)\n  \n      const columns = active_columns.map( (col) => {\n        let columnData = {\n          dataField: col,\n          text: this.props.columnInfo[col]['text'],\n          sort: true,\n          type: this.props.columnInfo[col]['type']\n        }\n        if (this.props.columnInfo[col]['formatter']){\n          columnData['formatter'] = this.props.columnInfo[col]['formatter']\n        }\n        if (this.props.columnInfo[col]['sortFunc']){\n          columnData['sortFunc'] = this.props.columnInfo[col]['sortFunc'];\n        }\n        if (this.props.columnInfo[col]['style']){\n          columnData['style'] = this.props.columnInfo[col]['style'];\n        }\n        if (this.props.columnInfo[col]['hidden']){\n          columnData['hidden'] = this.props.columnInfo[col]['hidden'];\n        }\n        return(columnData);\n      })\n  \n       const isDataEmpty = Object.keys(this.state.data).length === 0;\n       if (!isDataEmpty) { \n         return (\n           <BootstrapTable striped hover condensed keyField='name' data={this.state.data} columns={columns}/>\n         );  \n       }\n       else{\n         return <div>No hay datos disponibles</div>\n       }\n     }\n  \n  }\n  \n  class MultipleStockData extends React.Component{\n    constructor(props){\n      super(props);\n      this.columns = ['date','open', 'close', 'high', 'low', 'volume', 'adjclose', 'daily_return', 'percentage_return', 'rsi_3d', 'rsi_5d', 'rsi_14d', 'rsi_25d'];\n\n      this.columnInfo = {\n        'name': {\n          'text': 'Accion',\n          'formatter': (name) => {return name.toUpperCase();},\n          'type': 'string',\n          'style': {\n            'fontWeight': 'bold'}\n        },\n        'date': {\n          'text': 'Fecha',\n          'formatter': (dateString) => {\n            let date = new Date(dateString);\n            return date.toLocaleDateString();\n          },\n          'type': 'string',\n          'hidden': true\n        },\n        'open': {\n          'text': 'Abrir',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'close': {\n          'text': 'Cierre',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'high': {\n          'text': 'Max',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'low': {\n          'text': 'Min',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'volume': {\n          'text': 'Volumen',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'adjclose': {\n          'text': 'Cierre ajus.',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'daily_return': {\n          'text': 'Rentabilidad por dia',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'percentage_return': {\n          'text': 'Rentabilidad %',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'hidden': true\n        },\n        'rsi_3d': {\n          'text': 'RSI 3 días',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'style': this.styleRanges(30,70),\n          'hidden': true\n        },\n        'rsi_5d': {\n          'text': 'RSI 5 días',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'style': this.styleRanges(30,70),\n          'hidden': true\n        },\n        'rsi_14d': {\n          'text': 'RSI 14 días',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'style': this.styleRanges(30,70),\n          'hidden': true\n        },\n        'rsi_25d': {\n          'text': 'RSI 25 días',\n          'formatter': (n) => {return this.roundDecimals(n,2)},\n          'type': 'number',\n          'sortFunc': numericSortFunc,\n          'style': this.styleRanges(30,70),\n          'hidden': true\n        }\n      };\n      \n      // Creamos headers para checklist\n      this.headers = {};\n      for (let stock of Object.keys(this.columnInfo)){\n          this.headers[stock] = this.columnInfo[stock]['text'];\n      }\n\n      this.state = {\n        stocks_list: [],\n        active_columns: [],\n        columnInfo: this.columnInfo\n      }\n      this.handleColumnChange = this.handleColumnChange.bind(this);\n    }\n  \n    styleRanges(a,b){\n      return (\n        function callback(cell, row, rowIndex, colIndex) {\n          if (+cell > b){\n            return ({color: 'red'});\n          } else if (+cell < a){\n            return ({color: 'green'});\n          }\n        }\n  \n      )}\n  \n    roundDecimals(n, decimals) {\n      return(Math.round( n * (10**decimals)) / (10**decimals) )\n    }\n  \n    getStocksList() {\n      fetch(`http://localhost:3001/stocksList`)\n      .then(response => {\n        return response.json();\n      })\n      .then(fetched_data => {\n        this.setState({\n          stocks_list: fetched_data\n        });\n      })\n    }\n  \n    componentDidMount() {\n      this.getStocksList();\n    }\n   \n    handleColumnChange(column_dict) {\n      let auxColumnInfo = this.state.columnInfo;\n  \n      for (var col of this.columns) {\n        auxColumnInfo[col]['hidden'] = !column_dict[col]\n      }\n      this.setState({\n        columnInfo: auxColumnInfo\n      });\n    }\n  \n    render () {\n      return (\n        <div className='panels'>\n  \n        <div className='panel-info'>   \n          <Checkbox\n            onColumnChange = {this.handleColumnChange}\n            columns = {this.columns}\n            optionLabels = {this.headers}\n            />\n        </div>\n  \n          <div className=\"panel-positions\">\n              {<MultipleStockTable\n              stocks_list = {this.state.stocks_list}\n              columnInfo = {this.state.columnInfo}\n              />}\n          </div>\n  \n        </div>\n      )\n    }\n  }\n\nexport {MultipleStockData};"]},"metadata":{},"sourceType":"module"}