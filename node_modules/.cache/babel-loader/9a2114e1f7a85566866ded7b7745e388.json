{"ast":null,"code":"var _jsxFileName = \"/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/Git/PlanningAdvisors-Frontend/src/SingleStockData.js\";\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { Checkbox, TextInput } from './TableComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllocationPanel extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Allocation Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass PerformancePanel extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Performance Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nclass StockTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prevColumns = [];\n    this.state = {\n      columns: ['date'],\n      stock_name: ['BTC_USD'],\n      data: {}\n    };\n  }\n\n  getStockData() {\n    const active_columns = this.props.active_columns;\n    const stock_name = this.props.active_stock;\n    fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`).then(response => {\n      return response.json();\n    }).then(fetched_data => {\n      this.setState({\n        data: fetched_data\n      });\n    });\n  }\n\n  render() {\n    if (this.props.active_columns !== this.prevColumns || this.props.active_stock !== this.prevStock) {\n      this.getStockData();\n      this.prevColumns = this.props.active_columns;\n      this.prevStock = this.props.active_stock;\n    }\n\n    const isDataEmpty = Object.keys(this.state.data).length === 0;\n\n    if (!isDataEmpty) {\n      // return <BootstrapTable keyField='name' data = {this.state.data}/>\n      return /*#__PURE__*/_jsxDEV(JSONTable, {\n        data: this.state.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" No hay datos disponibles \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\n\nfunction JSONTable(props) {\n  // Usamos las keys como headers\n  let headers = Object.keys(props.data[0]);\n  let tableHeaders;\n\n  if (props.headers) {\n    tableHeaders = headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\" \", props.headers[header]]\n    }, header, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this));\n  } else {\n    tableHeaders = headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n      children: [\" \", header]\n    }, header, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this));\n  }\n\n  const tableHead = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: tableHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 28\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 21\n  }, this); // Colocar llaves como input\n\n\n  var keys = Object.keys(props.data[0]);\n  const listRows = []; // Iteramos sobre cada objeto que será una fila\n\n  let i = 1;\n\n  for (var obj of props.data) {\n    try {\n      let listData = [];\n      let j = 1; // Iteramos sobre cada elemento que será una celda\n\n      for (const k of keys) {\n        let value;\n\n        if (props.columnManage && props.columnManage[k]) {\n          let f = props.columnManage[k];\n          value = f(obj[k]);\n        } else {\n          value = obj[k];\n        }\n\n        listData.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\" \", value, \" \"]\n        }, j, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 23\n        }, this));\n        j++;\n      } // console.log(listData);\n\n\n      var dataTR = /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: listData\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 20\n      }, this); // var element = <tbody key={obj.id} > {dataTR} </tbody> \n\n\n      listRows.push(dataTR);\n      i++;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  var tableBody = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: listRows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 19\n  }, this); // const listRows = data.data.map((item) => \n  //   <li key = {item.id}>{  item.id}</li>)\n\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    responsive: \"sm\",\n    children: [tableHead, tableBody]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 11\n  }, this);\n}\n\n_c = JSONTable;\n\nclass SingleStockData extends React.Component {\n  constructor(props) {\n    super(props); // Lista de columnas\n\n    this.columns = ['open', 'close', 'high', 'low', 'volume', 'adjclose', 'daily_return', 'percentage_return', 'rsi_3d', 'rsi_5d', 'rsi_14d', 'rsi_25d']; // Creamos diccionario columns con columnas vacías\n\n    this.state = {\n      active_columns: ['date'],\n      active_stock: 'BTC_USD'\n    };\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n    this.handleTickrChange = this.handleTickrChange.bind(this);\n  }\n\n  handleColumnChange(column_dict) {\n    const active_columns_aux = ['date'];\n\n    for (var col of this.columns) {\n      if (column_dict[col]) {\n        active_columns_aux.push(col);\n      }\n    }\n\n    this.setState({\n      active_columns: active_columns_aux\n    });\n  }\n\n  handleTickrChange(stock_name) {\n    this.setState({\n      active_stock: stock_name\n    });\n    console.log(\"Nuevo stock: \" + stock_name);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panels\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-info\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            onColumnChange: this.handleColumnChange,\n            columns: this.columns\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            onChange: this.handleTickrChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-allocation\",\n        children: /*#__PURE__*/_jsxDEV(AllocationPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-balance\",\n        children: /*#__PURE__*/_jsxDEV(PerformancePanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-positions\",\n        children: /*#__PURE__*/_jsxDEV(StockTable, {\n          active_columns: this.state.active_columns,\n          update_columns: true,\n          active_stock: this.state.active_stock\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport { SingleStockData };\n\nvar _c;\n\n$RefreshReg$(_c, \"JSONTable\");","map":{"version":3,"sources":["/Users/ignaciourrutiagajardo/Documents/Web/PlanningAdvisors/Git/PlanningAdvisors-Frontend/src/SingleStockData.js"],"names":["React","Table","Checkbox","TextInput","AllocationPanel","Component","render","PerformancePanel","StockTable","constructor","props","prevColumns","state","columns","stock_name","data","getStockData","active_columns","active_stock","fetch","then","response","json","fetched_data","setState","prevStock","isDataEmpty","Object","keys","length","JSONTable","headers","tableHeaders","map","header","tableHead","listRows","i","obj","listData","j","k","value","columnManage","f","push","dataTR","e","console","error","tableBody","SingleStockData","handleColumnChange","bind","handleTickrChange","column_dict","active_columns_aux","col","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport {Checkbox, TextInput} from './TableComponents'\n\nclass AllocationPanel extends React.Component {\n  render() {\n    return <p>Allocation Panel</p>\n  }\n}\n\nclass PerformancePanel extends React.Component {\n  render() {\n    return <p>Performance Panel</p>\n  }\n}\n\n\nclass StockTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prevColumns = [];\n\n    this.state = {\n      columns: ['date'],\n      stock_name: ['BTC_USD'],\n      data: {}\n    }\n  }\n\n  getStockData() {\n    const active_columns = this.props.active_columns;\n    const stock_name = this.props.active_stock;\n    fetch(`http://localhost:3001/get/${stock_name}/${active_columns}`)\n    .then(response => {\n      return response.json();\n    })\n    .then(fetched_data => {\n      this.setState({\n        data: fetched_data\n      });\n    })\n  }\n\n  render(){\n   if (this.props.active_columns !== this.prevColumns || this.props.active_stock !== this.prevStock){\n     this.getStockData();\n     this.prevColumns = this.props.active_columns;\n     this.prevStock = this.props.active_stock;\n   }\n\n    const isDataEmpty = Object.keys(this.state.data).length === 0;\n    if (!isDataEmpty) { \n      // return <BootstrapTable keyField='name' data = {this.state.data}/>\n      return <JSONTable data={this.state.data}/>; \n    }\n    else{\n      return <div> No hay datos disponibles </div>\n    }\n  }\n}\n\nfunction JSONTable(props) {\n  // Usamos las keys como headers\n  let headers = Object.keys(props.data[0]);\n  let tableHeaders;\n\n  if (props.headers) {\n    tableHeaders = headers.map((header) =>\n    <th key={header}> {props.headers[header]}</th> );\n  }\n  else {\n    tableHeaders = headers.map((header) =>\n    <th key={header}> {header}</th>);\n  }\n  const tableHead = <thead><tr>{tableHeaders}</tr></thead>;\n\n  // Colocar llaves como input\n  var keys = Object.keys(props.data[0]);\n  const listRows = [];\n\n  // Iteramos sobre cada objeto que será una fila\n  let i = 1;\n  for (var obj of props.data){\n    try {\n      let listData = [];\n      let j = 1;\n      // Iteramos sobre cada elemento que será una celda\n      for (const k of keys){\n        let value;\n        if (props.columnManage && props.columnManage[k]){\n          let f = props.columnManage[k];\n          value = f(obj[k]);\n        }\n        else {\n          value = obj[k];\n        }\n        listData.push(<td key={j}> {value} </td>);\n        j ++;\n      }\n      // console.log(listData);\n      var dataTR = <tr key={i}>{listData}</tr>\n      // var element = <tbody key={obj.id} > {dataTR} </tbody> \n      listRows.push(dataTR);\n      i++;\n    } catch (e) {console.error(e)}\n    }\n\n  var tableBody = <tbody>{listRows}</tbody>\n  // const listRows = data.data.map((item) => \n  //   <li key = {item.id}>{  item.id}</li>)\n  return (<Table striped bordered hover responsive=\"sm\">{tableHead}{tableBody}</Table>)  \n}\n\nclass SingleStockData extends React.Component {\n  constructor(props){\n    super(props);\n\n    // Lista de columnas\n    this.columns = ['open', 'close', 'high', 'low', 'volume', 'adjclose', 'daily_return', 'percentage_return', 'rsi_3d', 'rsi_5d', 'rsi_14d', 'rsi_25d'];\n    // Creamos diccionario columns con columnas vacías\n    this.state = {\n      active_columns: ['date'],\n      active_stock: 'BTC_USD'\n    };\n\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n    this.handleTickrChange = this.handleTickrChange.bind(this);\n  }\n  \n  handleColumnChange(column_dict) {\n    const active_columns_aux = ['date']\n    for (var col of this.columns) {\n      if (column_dict[col]) {\n        active_columns_aux.push(col)\n      }\n    }\n    this.setState({\n      active_columns: active_columns_aux\n    });\n  }\n\n  handleTickrChange(stock_name) {\n    this.setState({\n      active_stock: stock_name\n    });\n    console.log(\"Nuevo stock: \" + stock_name);\n  }\n\n  render() {\n    return (\n      <div className=\"panels\">\n        <div className=\"panel-info\">\n          <div>\n\n          <Checkbox\n          onColumnChange = {this.handleColumnChange}\n          columns = {this.columns}\n          />\n\n          <TextInput\n          onChange = {this.handleTickrChange}\n          />\n\n          </div>\n        </div>\n        <div className=\"panel-allocation\">\n          <AllocationPanel />\n        </div>\n        <div className=\"panel-balance\">\n          <PerformancePanel/>\n        </div>\n        <div className=\"panel-positions\">\n          {<StockTable\n          active_columns = {this.state.active_columns} \n          update_columns = {true}\n          active_stock = {this.state.active_stock}\n          />}\n          \n     </div>   \n     </div>\n    )\n  }\n}\nexport {SingleStockData};"]},"metadata":{},"sourceType":"module"}